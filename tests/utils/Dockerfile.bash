
# LABEL maintainer "NVIDIA CORPORATION <cudatools@nvidia.com>"

apt-get update && apt-get install -y --no-install-recommends \
    gnupg2 curl ca-certificates && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && \
    apt-get purge --autoremove -y curl \
    && rm -rf /var/lib/apt/lists/*

export CUDA_VERSION=10.1.243
export CUDA_PKG_VERSION=10-1=$CUDA_VERSION-1

# # For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     cuda-cudart-$CUDA_PKG_VERSION \
#     cuda-compat-10-1 \
#     && ln -s cuda-10.1 /usr/local/cuda && \
#     rm -rf /var/lib/apt/lists/*

# Required for nvidia-docker v1
echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
export LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
export NVIDIA_VISIBLE_DEVICES=all
export NVIDIA_DRIVER_CAPABILITIES=compute,utility
export NVIDIA_REQUIRE_CUDA="cuda>=10.1 brand=tesla,driver>=396,driver<397 brand=tesla,driver>=410,driver<411 brand=tesla,driver>=418,driver<419"


# This Dockerfile is generated by 'generate-Dockerfile.sh' from elements within 'src/'

# **Please do not change this file directly!**
# To adapt this Dockerfile, adapt 'generate-Dockerfile.sh' or 'src/Dockerfile.usefulpackages'.
# More information can be found in the README under configuration.


# Use NVIDIA CUDA as base image and run the same installation as in the other packages.
# The version of cudatoolkit must match those of the base image, see Dockerfile.pytorch
# FROM nvidia/cuda:10.1-cudnn7-runtime-ubuntu18.04

# LABEL authors="Christoph Schranz <christoph.schranz@salzburgresearch.at>, Mathematical Michael <consistentbayes@gmail.com>"
# This is a concatenated Dockerfile, the maintainers of subsequent sections may vary.
chmod 1777 /tmp && chmod 1777 /var/tmp

############################################################################
#################### Dependency: jupyter/base-image ########################
############################################################################

# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

# Ubuntu 20.04 (focal)
# https://hub.docker.com/_/ubuntu/?tab=tags&name=focal
# OS/ARCH: linux/amd64
export ROOT_CONTAINER=ubuntu:focal-20210119@sha256:3093096ee188f8ff4531949b8f6115af4747ec1c58858c091c8cb4579c39cc4e


export NB_USER="jovyan"
export NB_UID="1000"
export NB_GID="100"

# Fix DL4006
# SHELL ["/bin/bash", "-o", "pipefail", "-c"]

su jovyan

# ---- Miniforge installer ----
# Default values can be overridden at build time
# (ARGS are in lower case to distinguish them from export)
# Check https://github.com/conda-forge/miniforge/releases
# Conda version
export conda_version="4.9.2"
# Miniforge installer patch version
export miniforge_patch_number="5"
# Miniforge installer architecture
export miniforge_arch="x86_64"
# Python implementation to use 
# can be either Miniforge3 to use Python or Miniforge-pypy3 to use PyPy
export miniforge_python="Miniforge3"

# Miniforge archive to install
export miniforge_version="${conda_version}-${miniforge_patch_number}"
# Miniforge installer
export miniforge_installer="${miniforge_python}-${miniforge_version}-Linux-${miniforge_arch}.sh"
# Miniforge checksum
export miniforge_checksum="49dddb3998550e40adc904dae55b0a2aeeb0bd9fc4306869cc4a600ec4b8b47c"

# Install all OS dependencies for notebook server that starts but lacks all
# features (e.g., download as all possible file formats)
export DEBIAN_FRONTEND=noninteractive
apt-get update \
    && apt-get install -yq --no-install-recommends \
    wget \
    ca-certificates \
    sudo \
    locales \
    fonts-liberation \
    run-one \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen

# Configure exportironment
export CONDA_DIR=/opt/conda \
    SHELL=/bin/bash \
    NB_USER=$NB_USER \
    NB_UID=$NB_UID \
    NB_GID=$NB_GID \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8
export PATH=$CONDA_DIR/bin:$PATH \
    HOME=/home/$NB_USER \
    CONDA_VERSION="${conda_version}" \
    MINIFORGE_VERSION="${miniforge_version}"

# Copy a script that we will use to correct permissions after running certain commands
# COPY fix-permissions /usr/local/bin/fix-permissions
# RUN chmod a+rx /usr/local/bin/fix-permissions

# Enable prompt color in the skeleton .bashrc before creating the default NB_USER
# hadolint ignore=SC2016
sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc && \
    # Add call to conda init script see https://stackoverflow.com/a/58081608/4413446
    echo 'eval "$(command conda shell.bash hook 2> /dev/null)"' >> /etc/skel/.bashrc 

# Create NB_USER with name jovyan user with UID=1000 and in the 'users' group
# and make sure these dirs are writable by the `users` group.
echo "auth requisite pam_deny.so" >> /etc/pam.d/su && \
    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \
    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \
    useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \
    mkdir -p $CONDA_DIR && \
    chown $NB_USER:$NB_GID $CONDA_DIR && \
    chmod g+w /etc/passwd

su $NB_USER
export PYTHON_VERSION=default

# Setup work directory for backward-compatibility

mkdir "/home/$NB_USER/work"

# Install conda as jovyan and check the sha256 sum provided on the download site
cd /tmp

# Prerequisites installation: conda, pip, tini
wget --quiet "https://github.com/conda-forge/miniforge/releases/download/${miniforge_version}/${miniforge_installer}" && \
    echo "${miniforge_checksum} *${miniforge_installer}" | sha256sum --check && \
    /bin/bash "${miniforge_installer}" -f -b -p $CONDA_DIR && \
    rm "${miniforge_installer}" && \
    # Conda configuration see https://conda.io/projects/conda/en/latest/configuration.html
    echo "conda ${CONDA_VERSION}" >> $CONDA_DIR/conda-meta/pinned && \
    conda config --system --set auto_update_conda false && \
    conda config --system --set show_channel_urls true && \
    if [ ! $PYTHON_VERSION = 'default' ]; then conda install --yes python=$PYTHON_VERSION; fi && \
    conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' >> $CONDA_DIR/conda-meta/pinned && \
    conda install --quiet --yes \
    "conda=${CONDA_VERSION}" \
    'pip' \
    'tini=0.18.0' && \
    conda update --all --quiet --yes && \
    conda list tini | grep tini | tr -s ' ' | cut -d ' ' -f 1,2 >> $CONDA_DIR/conda-meta/pinned && \
    conda clean --all -f -y && \
    rm -rf /home/$NB_USER/.cache/yarn

# # Install Jupyter Notebook, Lab, and Hub
# # Generate a notebook server config
# # Cleanup temporary files
# # Correct permissions
# # Do all this in a single RUN command to avoid duplicating all of the
# # files across image layers when the permissions change
# RUN conda install --quiet --yes \
#     'notebook=6.2.0' \
#     'jupyterhub=1.3.0' \
#     'jupyterlab=3.0.5' && \
#     conda clean --all -f -y && \
#     npm cache clean --force && \
#     jupyter notebook --generate-config && \
#     jupyter lab clean && \
#     rm -rf /home/$NB_USER/.cache/yarn && \
#     fix-permissions $CONDA_DIR && \
#     fix-permissions /home/$NB_USER

# EXPOSE 8888

# # Configure container startup
# ENTRYPOINT ["tini", "-g", "--"]
# CMD ["start-notebook.sh"]

# # Copy local files as late as possible to avoid cache busting
# COPY start.sh start-notebook.sh start-singleuser.sh /usr/local/bin/
# # Currently need to have both jupyter_notebook_config and jupyter_server_config to support classic and lab
# COPY jupyter_notebook_config.py /etc/jupyter/

# # Fix permissions on /etc/jupyter as root
# USER root

# # Prepare upgrade to JupyterLab V3.0 #1205
# RUN sed -re "s/c.NotebookApp/c.ServerApp/g" \
#     /etc/jupyter/jupyter_notebook_config.py > /etc/jupyter/jupyter_server_config.py

# RUN fix-permissions /etc/jupyter/

# # Switch back to jovyan to avoid accidental container runs as root
# USER $NB_UID

# WORKDIR $HOME

# ############################################################################
# ################# Dependency: jupyter/minimal-notebook #####################
# ############################################################################

# # Copyright (c) Jupyter Development Team.
# # Distributed under the terms of the Modified BSD License.

# LABEL maintainer="Jupyter Project <jupyter@googlegroups.com>"

# USER root

# # Install all OS dependencies for fully functional notebook server
# RUN apt-get update && apt-get install -yq --no-install-recommends \
#     build-essential \
#     vim-tiny \
#     git \
#     inkscape \
#     libsm6 \
#     libxext-dev \
#     libxrender1 \
#     lmodern \
#     netcat \
#     # ---- nbconvert dependencies ----
#     texlive-xetex \
#     texlive-fonts-recommended \
#     texlive-plain-generic \
#     # ----
#     tzdata \
#     unzip \
#     nano-tiny \
#     && apt-get clean && rm -rf /var/lib/apt/lists/*

# # Create alternative for nano -> nano-tiny
# RUN update-alternatives --install /usr/bin/nano nano /bin/nano-tiny 10

# # Switch back to jovyan to avoid accidental container runs as root
# USER $NB_UID

# ############################################################################
# ################# Dependency: jupyter/scipy-notebook #######################
# ############################################################################

# # Copyright (c) Jupyter Development Team.
# # Distributed under the terms of the Modified BSD License.

# LABEL maintainer="Jupyter Project <jupyter@googlegroups.com>"

# USER root

# # ffmpeg for matplotlib anim & dvipng+cm-super for latex labels
# RUN apt-get update && \
#     apt-get install -y --no-install-recommends ffmpeg dvipng cm-super && \
#     apt-get clean && rm -rf /var/lib/apt/lists/*

# su $NB_UID

# # Install Python 3 packages
# RUN conda install --quiet --yes \
#     'beautifulsoup4=4.9.*' \
#     'conda-forge::blas=*=openblas' \
#     'bokeh=2.2.*' \
#     'bottleneck=1.3.*' \
#     'cloudpickle=1.6.*' \
#     'cython=0.29.*' \
#     'dask=2021.1.*' \
#     'dill=0.3.*' \
#     'h5py=3.1.*' \
#     'ipywidgets=7.6.*' \
#     'ipympl=0.6.*'\
#     'matplotlib-base=3.3.*' \
#     'numba=0.52.*' \
#     'numexpr=2.7.*' \
#     'pandas=1.2.*' \
#     'patsy=0.5.*' \
#     'protobuf=3.14.*' \
#     'pytables=3.6.*' \
#     'scikit-image=0.18.*' \
#     'scikit-learn=0.24.*' \
#     'scipy=1.6.*' \
#     'seaborn=0.11.*' \
#     'sqlalchemy=1.3.*' \
#     'statsmodels=0.12.*' \
#     'sympy=1.7.*' \
#     'vincent=0.4.*' \
#     'widgetsnbextension=3.5.*'\
#     'xlrd=2.0.*' && \
#     conda clean --all -f -y && \
#     fix-permissions "${CONDA_DIR}" && \
#     fix-permissions "/home/${NB_USER}"

# # Install facets which does not have a pip or conda package at the moment
# WORKDIR /tmp
# RUN git clone https://github.com/PAIR-code/facets.git && \
#     jupyter nbextension install facets/facets-dist/ --sys-prefix && \
#     rm -rf /tmp/facets && \
#     fix-permissions "${CONDA_DIR}" && \
#     fix-permissions "/home/${NB_USER}"

# # Import matplotlib the first time to build the font cache.
# export XDG_CACHE_HOME="/home/${NB_USER}/.cache/"

# RUN MPLBACKEND=Agg python -c "import matplotlib.pyplot" && \
#     fix-permissions "/home/${NB_USER}"

# USER $NB_UID

# WORKDIR $HOME

# ############################################################################
# ########################## Dependency: gpulibs #############################
# ############################################################################

# LABEL maintainer="Christoph Schranz <christoph.schranz@salzburgresearch.at>"

# # Install Tensorflow, check compatibility here: https://www.tensorflow.org/install/gpu
# # installation via conda leads to errors in version 4.8.2
# RUN pip install --upgrade pip && \
#     pip install --no-cache-dir "tensorflow==2.3.2" && \
#     pip install --no-cache-dir keras

# # Install PyTorch with dependencies
# RUN conda install --quiet --yes \
#     pyyaml mkl mkl-include setuptools cmake cffi typing

# Check compatibility here: https://pytorch.org/get-started/locally/
conda install --quiet --yes \
    pytorch \
    torchvision \
    cudatoolkit=10.1 -c pytorch

# RUN pip install torch_nightly -f https://download.pytorch.org/whl/nightly/cu90/torch_nightly.html && \
#     pip install  --no-cache-dir torchviz


# Clean installation
conda clean --all -f -y

# ############################################################################
# ############################ Useful packages ###############################
# ############################################################################

# LABEL authors="Christoph Schranz <christoph.schranz@salzburgresearch.at>, Mathematical Michael <consistentbayes@gmail.com>"

# USER root

# RUN pip install --no-cache-dir ipyleaflet plotly==4.14.3 "ipywidgets>=7.5"

# # Install important packages and Graphviz
# RUN set -ex \
#     && buildDeps=' \
#     graphviz==0.11 \
#     ' \
#     && apt-get update \
#     && apt-get -y install htop apt-utils graphviz libgraphviz-dev openssh-client \
#     && pip install --no-cache-dir $buildDeps

# # Install various extensions
# RUN fix-permissions $CONDA_DIR
# # jupyterlab/github Does not support jlab 3.x yet, install well maintained alternative instead
# # RUN jupyter labextension install @jupyterlab/github
# RUN pip install --upgrade jupyterlab jupyterlab-git
# RUN pip install jupyterlab-drawio
# RUN jupyter nbextension enable --py --sys-prefix ipyleaflet
# RUN jupyter labextension install jupyterlab-plotly@4.14.3
# RUN jupyter labextension install @jupyter-widgets/jupyterlab-manager plotlywidget@4.14.3
# RUN pip install --no-cache-dir jupyter-tabnine==1.1.0  --user && \
#     jupyter nbextension install --py jupyter_tabnine --user && \
#     jupyter nbextension enable --py jupyter_tabnine --user && \
#     jupyter serverextension enable --py jupyter_tabnine --user
# RUN pip install --no-cache-dir jupyter_contrib_nbextensions \
#     jupyter_nbextensions_configurator rise
# #  jupyter nbextension enable codefolding/main
# RUN jupyter labextension install @ijmbarr/jupyterlab_spellchecker

# RUN fix-permissions /home/$NB_USER

# # Switch back to jovyan to avoid accidental container runs as root
# USER $NB_UID

# # Copy jupyter_notebook_config.json
# COPY jupyter_notebook_config.json /etc/jupyter/

# CMD [ "/bin/bash" ]