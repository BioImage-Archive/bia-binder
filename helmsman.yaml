metadata:
  organization: EBI
  maintainer: Craig Russell (ctr26@ebi.ac.uk)
  description: EBI hub deployment

helmRepos:
  jupyterhub: "https://jupyterhub.github.io/helm-chart/"
  # daskgateway: "https://dask.org/dask-gateway-helm-repo/"
  dask: "https://helm.dask.org/"
  jetstack: "https://charts.jetstack.io"
  persistent_binderhub: "https://gesiscss.github.io/persistent_binderhub"
  nginx-stable: "https://helm.nginx.com/stable"
  ingress-nginx: "https://kubernetes.github.io/ingress-nginx"
  trow: "https://trow.io"
  twuni: "https://helm.twun.io"
  triton: "https://ctr26.github.io/tritoninferenceserver/"
  # prometheus-community: "https://prometheus-community.github.io/helm-charts"
  # kube-state-metrics: "https://kubernetes.github.io/kube-state-metrics"
  nvdp: "https://nvidia.github.io/k8s-device-plugin"
  nvidia: "https://nvidia.github.io/gpu-operator"
  
appsTemplates:
  binderhub: &binderhub
    name: "binderhub"
    chart: "jupyterhub/binderhub"
    version: "1.0.0-0.dev.git.3035.h32213a4"
    priority: -8
    wait: false # Lethal for binderhub
    timeout: 180
    enabled: false
    hooks:
      postUpgrade: "fuser/fuser.yml"
      postInstall: "fuser/fuser.yml"
    set:
      jupyterhub.hub.services.binder.apiToken: "$SECRET_JUPYTERHUB_PROXY_TOKEN"
      jupyterhub.proxy.secretToken: "$SECRET_BINDERHUB_SERVICE"
      config.DockerRegistry.token_url: ""
      config.BinderHub.image_prefix: "registry.binder.bioimagearchive.org/"
      registry.url: https://registry.binder.bioimagearchive.org
      config.BinderHub.use_registry: true
  
  jupyterhub: &jupyterhub
    name: "jupyterhub"
    chart: "jupyterhub/jupyterhub"
    version: "0.10.2-n047.hb387f987"
    helmFlags:
      - "--debug"
    wait: false
    timeout: 1200
    enabled: false
    priority: -9
    set:
      proxy.secretToken: "$SECRET_JUPYTERHUB_PROXY_TOKEN"

  dask: &dask
    name: "dask-gateway"
    chart: "dask/dask-gateway"
    version: "2022.4.0"
    enabled: false
    priority: -10
    timeout: 120

apps:

  trow:
    name: "trow"
    namespace: "trow"
    chart: "trow/trow"
    enabled: false
    version: "0.3.3"
    valuesFiles:
      - trow/values.yaml
      - trow/values.yaml 

  nvidia-device-plugin:
    name: "nvidia-device-plugin"
    namespace: "nvidia-device-plugin"
    chart: "nvdp/nvidia-device-plugin"
    group: "prod"
    enabled: false
    version: "0.10.0"

  docker-registry:
    name: "docker-registry"
    namespace: "docker-registry"
    chart: "twuni/docker-registry"
    group: "prod"
    enabled: false
    priority: -3
    version: "2.1.0"
    set:
      proxy:enabled: true
      # proxy.username: "$CI_REGISTRY_USER"
      # proxy.password: "$CI_REGISTRY_PASSWORD"
    valuesFiles:
      - docker-registry/values.yaml 

  ingress-nginx:
    name: "ingress-nginx"
    namespace: "ingress-nginx"
    chart: "ingress-nginx/ingress-nginx"
    group: "prod"
    enabled: false
    priority: -100
    version: "4.6.0"
    valuesFiles:
      - ingress/nginx-ingress.yaml 

  daskgateway:
    <<: *dask
    name: "daskgateway"
    group: "prod"
    namespace: "daskgateway"
    # valuesFiles:
    # - "daskgateway/prod.yaml"

  binderhub-dev:
    <<: *binderhub
    name: "binderhub-dev"
    namespace: "binderhub-dev"
    group: "dev"
    # protected: false
    valuesFiles:
      - "binderhub/config.yaml"
      - "binderhub/dev/config.yaml"


  binderhub-prod:
    <<: *binderhub
    name: "binderhub-prod"
    namespace: "binderhub-prod"
    group: "prod"
    valuesFiles:
      - "binderhub/config.yaml"
      - "binderhub/prod/config.yaml"
      # - "binderhub/persistentVolumes.yaml"

  binderhub-prod-gpu:
    <<: *binderhub
    enabled: false
    name: "binderhub-prod-gpu"
    namespace: "binderhub-prod-gpu"
    group: "prod"
    # valuesFiles:

  binderhub-dev-gpu:
    <<: *binderhub
    enabled: false
    name: "binderhub-dev-gpu"
    namespace: "binderhub-dev-gpu"
    group: "dev"

  jupyterhub-sandbox-dev:
    <<: *jupyterhub
    name: "jupyterhub-sandbox-dev"
    group: "dev"
    namespace: "jupyterhub-sandbox-dev"
    # hooks:
    #   preInstall: "jupyterhub/dev/volumes/biostudies.yaml"
    valuesFiles:
      - "jupyterhub/config.yaml"
      # - "jupyterhub/persistentVolumes.yaml"
      - "jupyterhub/dev/config.yaml"
      - "jupyterhub/sandbox.yaml"
      # - "jupyterhub/dev/sandbox.yaml"

  jupyterhub-sandbox-prod:
    <<: *jupyterhub
    name: "jupyterhub-sandbox-prod"
    group: "prod"
    namespace: "jupyterhub-sandbox-prod"
    # hooks:
    #   preInstall: "jupyterhub/prod/volumes/biostudies.yaml"
    valuesFiles:
      - "jupyterhub/config.yaml"
      # - "jupyterhub/persistentVolumes.yaml"
      - "jupyterhub/prod/config.yaml"
      - "jupyterhub/sandbox.yaml"
      # - "jupyterhub/prod/sandbox.yaml"

  jupyterhub-github-dev:
    <<: *jupyterhub
    name: "jupyterhub-github-dev"
    group: "dev"
    namespace: "jupyterhub-github-dev"
    set:
      auth.github.callbackUrl: "dev.$HOST_NAME/github/hub/oauth_callback"
    valuesFiles:
      - "jupyterhub/config.yaml"
      - "jupyterhub/dev/config.yaml"
      # - "jupyterhub/persistentVolumes.yaml"
      - "jupyterhub/github.yaml"
      - "jupyterhub/dev/github.yaml"

  jupyterhub-github-prod:
    <<: *jupyterhub
    name: "jupyterhub-github-prod"
    group: "prod"
    namespace: "jupyterhub-github-prod"
    # set:
      # auth.github.callbackUrl: "$HOST_NAME/github/hub/oauth_callback"
    valuesFiles:
      - "jupyterhub/config.yaml"
      - "jupyterhub/prod/config.yaml"
      # - "jupyterhub/persistentVolumes.yaml"
      - "jupyterhub/github.yaml"
      # - "jupyterhub/prod/github.yaml"

  cert-manager-prod:
    name: "cert-manager"
    chart: "jetstack/cert-manager"
    enabled: false
    priority: 0
    # timeout: 120
    version: "v1.7.2"
    wait: true
    group: "prod"
    namespace: "cert-manager"
    set:
      installCRDs: true
      ingressShim.defaultIssuerKind: "ClusterIssuer"
      ingressShim.defaultIssuerName: "letsencrypt-prod"
    hooks:
      postUpgrade: "cert-managment/cluster_issuer.yaml"
      postInstall: "cert-managment/cluster_issuer.yaml"

  nvidia-gpu-operator:
    name: "nvidia-gpu-operator"
    namespace: "gpu-operator"
    chart: "nvidia/gpu-operator"
    enabled: false
    version: "1.9.1"
    group: "prod"
